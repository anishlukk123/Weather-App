{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\garam\\\\React Projects\\\\weather-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport rain from './assets/rain_bg.png';\nimport snow from './assets/cold_snow_bg.png';\nimport warm from './assets/hot_bg.png';\nimport cold from './assets/cold_bg.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = {\n  key: \"b558516afabd80aaedfa4b01d93278d6\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nfunction App() {\n  _s();\n\n  const [query, setQuery] = useState('');\n  var [activeQuery, setActiveQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [weatherForecast, setWeatherForecast] = useState('');\n  const background = [warm, cold, rain, snow];\n  const [backgroundNumber, setBackgroundNumber] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      setActiveQuery(query);\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`).then(res => {\n        if (res.ok) {\n          setErrorMessage(false);\n          return res.json();\n        } else {\n          throw new Error('invalid input');\n        }\n      }).then(result => {\n        setActiveQuery(query);\n        setWeather(result);\n        setWeatherForecast(result.weather[0].main);\n        setTemperature(result.weather.temp);\n        console.log(result.weather[0].main);\n\n        if (result.weather[0].main === \"Thunderstorm\" || result.weather[0].main === \"Rain\") {\n          setBackgroundNumber(1);\n          console.log(\"thisalsoran\");\n        } else if (result.weather[0].main === \"Snow\") {\n          setBackgroundNumber(1);\n        } else {\n          setBackgroundNumber(0);\n          console.log(\"thisran\");\n        }\n\n        setQuery('');\n      }).catch(error => {\n        console.log(error);\n        setErrorMessage(true);\n      });\n    }\n  };\n\n  const dateBuilder = d => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    style: {\n      backgroundImage: `url(${background[backgroundNumber]})`,\n      backgroundSize: \"256px 144px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search-bar\",\n          placeholder: \"Search...\",\n          onChange: e => setQuery(e.target.value),\n          value: query,\n          onKeyPress: search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), typeof weather.main != \"undefined\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location\",\n            children: [weather.name, \", \", weather.sys.country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date\",\n            children: dateBuilder(new Date())\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temp\",\n            children: [Math.round(weather.main.temp), \"\\xB0c\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather\",\n            children: weather.weather[0].main\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"mSyP5brRv1k8oORmV1zoyrYwIQ8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/garam/React Projects/weather-react/src/App.js"],"names":["React","useState","rain","snow","warm","cold","api","key","base","App","query","setQuery","activeQuery","setActiveQuery","weather","setWeather","weatherForecast","setWeatherForecast","background","backgroundNumber","setBackgroundNumber","errorMessage","setErrorMessage","search","evt","fetch","then","res","ok","json","Error","result","main","setTemperature","temp","console","log","catch","error","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","backgroundImage","backgroundSize","e","target","value","name","sys","country","Date","Math","round"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport rain from './assets/rain_bg.png';\nimport snow from './assets/cold_snow_bg.png';\nimport warm from './assets/hot_bg.png';\nimport cold from './assets/cold_bg.png';\n\n\nconst api ={\n  key: \"b558516afabd80aaedfa4b01d93278d6\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  var [activeQuery, setActiveQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [weatherForecast, setWeatherForecast] = useState('');\n\n  const background = [warm, cold, rain, snow]\n  const [backgroundNumber, setBackgroundNumber] = useState(0);\n\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  const search = evt =>{\n    if(evt.key === \"Enter\") {\n      setActiveQuery(query)\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => {\n        if (res.ok) {\n          setErrorMessage(false)\n          return res.json();\n        } else {\n          throw new Error('invalid input');\n        }\n      })\n      .then(result => {\n        setActiveQuery(query)\n        setWeather(result);\n        setWeatherForecast(result.weather[0].main);\n        setTemperature(result.weather.temp)\n        console.log(result.weather[0].main);\n        if(result.weather[0].main === \"Thunderstorm\" || result.weather[0].main === \"Rain\"){\n          setBackgroundNumber(1)\n          console.log(\"thisalsoran\")\n        }\n        else if(result.weather[0].main === \"Snow\"){\n          setBackgroundNumber(1)\n        }\n        else{\n          setBackgroundNumber(0)\n          console.log(\"thisran\")\n        }\n        setQuery('');\n      })\n      .catch((error) => {\n        console.log(error)\n        setErrorMessage(true)\n      });\n    }\n}\n\n\n  const dateBuilder = (d) =>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className='app' style={{backgroundImage: `url(${background[backgroundNumber]})`, backgroundSize: \"256px 144px\"}}>\n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}°c\n            </div>\n            <div className=\"weather\">\n              {weather.weather[0].main}</div>\n          </div>\n        </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}